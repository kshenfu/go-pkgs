(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{171:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"hash"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#hash","aria-hidden":"true"}},[t._v("#")]),t._v(" hash")]),t._v(" "),n("p",[t._v("定义了三个接口，分别如下：")]),t._v(" "),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Hash "),n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Write (via the embedded io.Writer interface) adds more data to the running hash.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// It never returns an error.")]),t._v("\n    io"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writer\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Sum appends the current hash to b and returns the resulting slice.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// It does not change the underlying hash state.")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Sum")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token builtin"}},[t._v("byte")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Reset resets the Hash to its initial state.")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Reset")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// Size returns the number of bytes Sum will return.")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("Size")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// BlockSize returns the hash's underlying block size.")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// The Write method must be able to accept any amount")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// of data, but it may operate more efficiently if all writes")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// are a multiple of the block size.")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("BlockSize")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Hash32 "),n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Hash\n    "),n("span",{attrs:{class:"token function"}},[t._v("Sum32")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("div",{staticClass:"language-go extra-class"},[n("pre",{pre:!0,attrs:{class:"language-go"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Hash64 "),n("span",{attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Hash\n    "),n("span",{attrs:{class:"token function"}},[t._v("Sum64")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token builtin"}},[t._v("uint64")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);e.options.__file="README.md";s.default=e.exports}}]);